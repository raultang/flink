/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.indicator.kafka;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** DBStreaming header. */
@org.apache.avro.specific.AvroGenerated
public class RheosDbHeader extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2252815523146841535L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"RheosDbHeader\",\"namespace\":\"io.indicator.kafka\",\"doc\":\"DBStreaming header.\",\"fields\":[{\"name\":\"schema\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"table\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"opType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"opTs\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"recordRowid\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tranScn\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"trailSeqno\",\"type\":\"long\"},{\"name\":\"trailRba\",\"type\":\"long\"},{\"name\":\"logPosition\",\"type\":\"long\"},{\"name\":\"logRba\",\"type\":\"long\"},{\"name\":\"dbName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ggHostName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"latencyTsMap\",\"type\":{\"type\":\"map\",\"values\":\"long\"}},{\"name\":\"numColumns\",\"type\":\"int\"},{\"name\":\"updColumns\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"nullColumns\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"missingColumns\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"beforeNullColumns\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"updCompressed\",\"type\":\"boolean\"},{\"name\":\"schemaType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"SchemaName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"timestamps\",\"type\":{\"type\":\"map\",\"values\":\"long\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<RheosDbHeader> ENCODER =
      new BinaryMessageEncoder<RheosDbHeader>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<RheosDbHeader> DECODER =
      new BinaryMessageDecoder<RheosDbHeader>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<RheosDbHeader> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<RheosDbHeader> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<RheosDbHeader>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this RheosDbHeader to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a RheosDbHeader from a ByteBuffer. */
  public static RheosDbHeader fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence schema;
  @Deprecated public java.lang.CharSequence table;
  @Deprecated public java.lang.CharSequence opType;
  @Deprecated public java.lang.CharSequence opTs;
  @Deprecated public java.lang.CharSequence recordRowid;
  @Deprecated public java.lang.CharSequence tranScn;
  @Deprecated public long trailSeqno;
  @Deprecated public long trailRba;
  @Deprecated public long logPosition;
  @Deprecated public long logRba;
  @Deprecated public java.lang.CharSequence dbName;
  @Deprecated public java.lang.CharSequence ggHostName;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Long> latencyTsMap;
  @Deprecated public int numColumns;
  @Deprecated public java.nio.ByteBuffer updColumns;
  @Deprecated public java.nio.ByteBuffer nullColumns;
  @Deprecated public java.nio.ByteBuffer missingColumns;
  @Deprecated public java.nio.ByteBuffer beforeNullColumns;
  @Deprecated public boolean updCompressed;
  @Deprecated public java.lang.CharSequence schemaType;
  @Deprecated public java.lang.CharSequence SchemaName;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Long> timestamps;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public RheosDbHeader() {}

  /**
   * All-args constructor.
   * @param schema The new value for schema
   * @param table The new value for table
   * @param opType The new value for opType
   * @param opTs The new value for opTs
   * @param recordRowid The new value for recordRowid
   * @param tranScn The new value for tranScn
   * @param trailSeqno The new value for trailSeqno
   * @param trailRba The new value for trailRba
   * @param logPosition The new value for logPosition
   * @param logRba The new value for logRba
   * @param dbName The new value for dbName
   * @param ggHostName The new value for ggHostName
   * @param latencyTsMap The new value for latencyTsMap
   * @param numColumns The new value for numColumns
   * @param updColumns The new value for updColumns
   * @param nullColumns The new value for nullColumns
   * @param missingColumns The new value for missingColumns
   * @param beforeNullColumns The new value for beforeNullColumns
   * @param updCompressed The new value for updCompressed
   * @param schemaType The new value for schemaType
   * @param SchemaName The new value for SchemaName
   * @param timestamps The new value for timestamps
   */
  public RheosDbHeader(java.lang.CharSequence schema, java.lang.CharSequence table, java.lang.CharSequence opType, java.lang.CharSequence opTs, java.lang.CharSequence recordRowid, java.lang.CharSequence tranScn, java.lang.Long trailSeqno, java.lang.Long trailRba, java.lang.Long logPosition, java.lang.Long logRba, java.lang.CharSequence dbName, java.lang.CharSequence ggHostName, java.util.Map<java.lang.CharSequence,java.lang.Long> latencyTsMap, java.lang.Integer numColumns, java.nio.ByteBuffer updColumns, java.nio.ByteBuffer nullColumns, java.nio.ByteBuffer missingColumns, java.nio.ByteBuffer beforeNullColumns, java.lang.Boolean updCompressed, java.lang.CharSequence schemaType, java.lang.CharSequence SchemaName, java.util.Map<java.lang.CharSequence,java.lang.Long> timestamps) {
    this.schema = schema;
    this.table = table;
    this.opType = opType;
    this.opTs = opTs;
    this.recordRowid = recordRowid;
    this.tranScn = tranScn;
    this.trailSeqno = trailSeqno;
    this.trailRba = trailRba;
    this.logPosition = logPosition;
    this.logRba = logRba;
    this.dbName = dbName;
    this.ggHostName = ggHostName;
    this.latencyTsMap = latencyTsMap;
    this.numColumns = numColumns;
    this.updColumns = updColumns;
    this.nullColumns = nullColumns;
    this.missingColumns = missingColumns;
    this.beforeNullColumns = beforeNullColumns;
    this.updCompressed = updCompressed;
    this.schemaType = schemaType;
    this.SchemaName = SchemaName;
    this.timestamps = timestamps;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return schema;
    case 1: return table;
    case 2: return opType;
    case 3: return opTs;
    case 4: return recordRowid;
    case 5: return tranScn;
    case 6: return trailSeqno;
    case 7: return trailRba;
    case 8: return logPosition;
    case 9: return logRba;
    case 10: return dbName;
    case 11: return ggHostName;
    case 12: return latencyTsMap;
    case 13: return numColumns;
    case 14: return updColumns;
    case 15: return nullColumns;
    case 16: return missingColumns;
    case 17: return beforeNullColumns;
    case 18: return updCompressed;
    case 19: return schemaType;
    case 20: return SchemaName;
    case 21: return timestamps;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: schema = (java.lang.CharSequence)value$; break;
    case 1: table = (java.lang.CharSequence)value$; break;
    case 2: opType = (java.lang.CharSequence)value$; break;
    case 3: opTs = (java.lang.CharSequence)value$; break;
    case 4: recordRowid = (java.lang.CharSequence)value$; break;
    case 5: tranScn = (java.lang.CharSequence)value$; break;
    case 6: trailSeqno = (java.lang.Long)value$; break;
    case 7: trailRba = (java.lang.Long)value$; break;
    case 8: logPosition = (java.lang.Long)value$; break;
    case 9: logRba = (java.lang.Long)value$; break;
    case 10: dbName = (java.lang.CharSequence)value$; break;
    case 11: ggHostName = (java.lang.CharSequence)value$; break;
    case 12: latencyTsMap = (java.util.Map<java.lang.CharSequence,java.lang.Long>)value$; break;
    case 13: numColumns = (java.lang.Integer)value$; break;
    case 14: updColumns = (java.nio.ByteBuffer)value$; break;
    case 15: nullColumns = (java.nio.ByteBuffer)value$; break;
    case 16: missingColumns = (java.nio.ByteBuffer)value$; break;
    case 17: beforeNullColumns = (java.nio.ByteBuffer)value$; break;
    case 18: updCompressed = (java.lang.Boolean)value$; break;
    case 19: schemaType = (java.lang.CharSequence)value$; break;
    case 20: SchemaName = (java.lang.CharSequence)value$; break;
    case 21: timestamps = (java.util.Map<java.lang.CharSequence,java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'schema' field.
   * @return The value of the 'schema' field.
   */
  public java.lang.CharSequence getSchema$() {
    return schema;
  }

  /**
   * Sets the value of the 'schema' field.
   * @param value the value to set.
   */
  public void setSchema$(java.lang.CharSequence value) {
    this.schema = value;
  }

  /**
   * Gets the value of the 'table' field.
   * @return The value of the 'table' field.
   */
  public java.lang.CharSequence getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   * @param value the value to set.
   */
  public void setTable(java.lang.CharSequence value) {
    this.table = value;
  }

  /**
   * Gets the value of the 'opType' field.
   * @return The value of the 'opType' field.
   */
  public java.lang.CharSequence getOpType() {
    return opType;
  }

  /**
   * Sets the value of the 'opType' field.
   * @param value the value to set.
   */
  public void setOpType(java.lang.CharSequence value) {
    this.opType = value;
  }

  /**
   * Gets the value of the 'opTs' field.
   * @return The value of the 'opTs' field.
   */
  public java.lang.CharSequence getOpTs() {
    return opTs;
  }

  /**
   * Sets the value of the 'opTs' field.
   * @param value the value to set.
   */
  public void setOpTs(java.lang.CharSequence value) {
    this.opTs = value;
  }

  /**
   * Gets the value of the 'recordRowid' field.
   * @return The value of the 'recordRowid' field.
   */
  public java.lang.CharSequence getRecordRowid() {
    return recordRowid;
  }

  /**
   * Sets the value of the 'recordRowid' field.
   * @param value the value to set.
   */
  public void setRecordRowid(java.lang.CharSequence value) {
    this.recordRowid = value;
  }

  /**
   * Gets the value of the 'tranScn' field.
   * @return The value of the 'tranScn' field.
   */
  public java.lang.CharSequence getTranScn() {
    return tranScn;
  }

  /**
   * Sets the value of the 'tranScn' field.
   * @param value the value to set.
   */
  public void setTranScn(java.lang.CharSequence value) {
    this.tranScn = value;
  }

  /**
   * Gets the value of the 'trailSeqno' field.
   * @return The value of the 'trailSeqno' field.
   */
  public java.lang.Long getTrailSeqno() {
    return trailSeqno;
  }

  /**
   * Sets the value of the 'trailSeqno' field.
   * @param value the value to set.
   */
  public void setTrailSeqno(java.lang.Long value) {
    this.trailSeqno = value;
  }

  /**
   * Gets the value of the 'trailRba' field.
   * @return The value of the 'trailRba' field.
   */
  public java.lang.Long getTrailRba() {
    return trailRba;
  }

  /**
   * Sets the value of the 'trailRba' field.
   * @param value the value to set.
   */
  public void setTrailRba(java.lang.Long value) {
    this.trailRba = value;
  }

  /**
   * Gets the value of the 'logPosition' field.
   * @return The value of the 'logPosition' field.
   */
  public java.lang.Long getLogPosition() {
    return logPosition;
  }

  /**
   * Sets the value of the 'logPosition' field.
   * @param value the value to set.
   */
  public void setLogPosition(java.lang.Long value) {
    this.logPosition = value;
  }

  /**
   * Gets the value of the 'logRba' field.
   * @return The value of the 'logRba' field.
   */
  public java.lang.Long getLogRba() {
    return logRba;
  }

  /**
   * Sets the value of the 'logRba' field.
   * @param value the value to set.
   */
  public void setLogRba(java.lang.Long value) {
    this.logRba = value;
  }

  /**
   * Gets the value of the 'dbName' field.
   * @return The value of the 'dbName' field.
   */
  public java.lang.CharSequence getDbName() {
    return dbName;
  }

  /**
   * Sets the value of the 'dbName' field.
   * @param value the value to set.
   */
  public void setDbName(java.lang.CharSequence value) {
    this.dbName = value;
  }

  /**
   * Gets the value of the 'ggHostName' field.
   * @return The value of the 'ggHostName' field.
   */
  public java.lang.CharSequence getGgHostName() {
    return ggHostName;
  }

  /**
   * Sets the value of the 'ggHostName' field.
   * @param value the value to set.
   */
  public void setGgHostName(java.lang.CharSequence value) {
    this.ggHostName = value;
  }

  /**
   * Gets the value of the 'latencyTsMap' field.
   * @return The value of the 'latencyTsMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Long> getLatencyTsMap() {
    return latencyTsMap;
  }

  /**
   * Sets the value of the 'latencyTsMap' field.
   * @param value the value to set.
   */
  public void setLatencyTsMap(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
    this.latencyTsMap = value;
  }

  /**
   * Gets the value of the 'numColumns' field.
   * @return The value of the 'numColumns' field.
   */
  public java.lang.Integer getNumColumns() {
    return numColumns;
  }

  /**
   * Sets the value of the 'numColumns' field.
   * @param value the value to set.
   */
  public void setNumColumns(java.lang.Integer value) {
    this.numColumns = value;
  }

  /**
   * Gets the value of the 'updColumns' field.
   * @return The value of the 'updColumns' field.
   */
  public java.nio.ByteBuffer getUpdColumns() {
    return updColumns;
  }

  /**
   * Sets the value of the 'updColumns' field.
   * @param value the value to set.
   */
  public void setUpdColumns(java.nio.ByteBuffer value) {
    this.updColumns = value;
  }

  /**
   * Gets the value of the 'nullColumns' field.
   * @return The value of the 'nullColumns' field.
   */
  public java.nio.ByteBuffer getNullColumns() {
    return nullColumns;
  }

  /**
   * Sets the value of the 'nullColumns' field.
   * @param value the value to set.
   */
  public void setNullColumns(java.nio.ByteBuffer value) {
    this.nullColumns = value;
  }

  /**
   * Gets the value of the 'missingColumns' field.
   * @return The value of the 'missingColumns' field.
   */
  public java.nio.ByteBuffer getMissingColumns() {
    return missingColumns;
  }

  /**
   * Sets the value of the 'missingColumns' field.
   * @param value the value to set.
   */
  public void setMissingColumns(java.nio.ByteBuffer value) {
    this.missingColumns = value;
  }

  /**
   * Gets the value of the 'beforeNullColumns' field.
   * @return The value of the 'beforeNullColumns' field.
   */
  public java.nio.ByteBuffer getBeforeNullColumns() {
    return beforeNullColumns;
  }

  /**
   * Sets the value of the 'beforeNullColumns' field.
   * @param value the value to set.
   */
  public void setBeforeNullColumns(java.nio.ByteBuffer value) {
    this.beforeNullColumns = value;
  }

  /**
   * Gets the value of the 'updCompressed' field.
   * @return The value of the 'updCompressed' field.
   */
  public java.lang.Boolean getUpdCompressed() {
    return updCompressed;
  }

  /**
   * Sets the value of the 'updCompressed' field.
   * @param value the value to set.
   */
  public void setUpdCompressed(java.lang.Boolean value) {
    this.updCompressed = value;
  }

  /**
   * Gets the value of the 'schemaType' field.
   * @return The value of the 'schemaType' field.
   */
  public java.lang.CharSequence getSchemaType() {
    return schemaType;
  }

  /**
   * Sets the value of the 'schemaType' field.
   * @param value the value to set.
   */
  public void setSchemaType(java.lang.CharSequence value) {
    this.schemaType = value;
  }

  /**
   * Gets the value of the 'SchemaName' field.
   * @return The value of the 'SchemaName' field.
   */
  public java.lang.CharSequence getSchemaName() {
    return SchemaName;
  }

  /**
   * Sets the value of the 'SchemaName' field.
   * @param value the value to set.
   */
  public void setSchemaName(java.lang.CharSequence value) {
    this.SchemaName = value;
  }

  /**
   * Gets the value of the 'timestamps' field.
   * @return The value of the 'timestamps' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Long> getTimestamps() {
    return timestamps;
  }

  /**
   * Sets the value of the 'timestamps' field.
   * @param value the value to set.
   */
  public void setTimestamps(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
    this.timestamps = value;
  }

  /**
   * Creates a new RheosDbHeader RecordBuilder.
   * @return A new RheosDbHeader RecordBuilder
   */
  public static io.indicator.kafka.RheosDbHeader.Builder newBuilder() {
    return new io.indicator.kafka.RheosDbHeader.Builder();
  }

  /**
   * Creates a new RheosDbHeader RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new RheosDbHeader RecordBuilder
   */
  public static io.indicator.kafka.RheosDbHeader.Builder newBuilder(io.indicator.kafka.RheosDbHeader.Builder other) {
    return new io.indicator.kafka.RheosDbHeader.Builder(other);
  }

  /**
   * Creates a new RheosDbHeader RecordBuilder by copying an existing RheosDbHeader instance.
   * @param other The existing instance to copy.
   * @return A new RheosDbHeader RecordBuilder
   */
  public static io.indicator.kafka.RheosDbHeader.Builder newBuilder(io.indicator.kafka.RheosDbHeader other) {
    return new io.indicator.kafka.RheosDbHeader.Builder(other);
  }

  /**
   * RecordBuilder for RheosDbHeader instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<RheosDbHeader>
    implements org.apache.avro.data.RecordBuilder<RheosDbHeader> {

    private java.lang.CharSequence schema;
    private java.lang.CharSequence table;
    private java.lang.CharSequence opType;
    private java.lang.CharSequence opTs;
    private java.lang.CharSequence recordRowid;
    private java.lang.CharSequence tranScn;
    private long trailSeqno;
    private long trailRba;
    private long logPosition;
    private long logRba;
    private java.lang.CharSequence dbName;
    private java.lang.CharSequence ggHostName;
    private java.util.Map<java.lang.CharSequence,java.lang.Long> latencyTsMap;
    private int numColumns;
    private java.nio.ByteBuffer updColumns;
    private java.nio.ByteBuffer nullColumns;
    private java.nio.ByteBuffer missingColumns;
    private java.nio.ByteBuffer beforeNullColumns;
    private boolean updCompressed;
    private java.lang.CharSequence schemaType;
    private java.lang.CharSequence SchemaName;
    private java.util.Map<java.lang.CharSequence,java.lang.Long> timestamps;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.indicator.kafka.RheosDbHeader.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.schema)) {
        this.schema = data().deepCopy(fields()[0].schema(), other.schema);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.opType)) {
        this.opType = data().deepCopy(fields()[2].schema(), other.opType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.opTs)) {
        this.opTs = data().deepCopy(fields()[3].schema(), other.opTs);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordRowid)) {
        this.recordRowid = data().deepCopy(fields()[4].schema(), other.recordRowid);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tranScn)) {
        this.tranScn = data().deepCopy(fields()[5].schema(), other.tranScn);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trailSeqno)) {
        this.trailSeqno = data().deepCopy(fields()[6].schema(), other.trailSeqno);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.trailRba)) {
        this.trailRba = data().deepCopy(fields()[7].schema(), other.trailRba);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.logPosition)) {
        this.logPosition = data().deepCopy(fields()[8].schema(), other.logPosition);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.logRba)) {
        this.logRba = data().deepCopy(fields()[9].schema(), other.logRba);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dbName)) {
        this.dbName = data().deepCopy(fields()[10].schema(), other.dbName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ggHostName)) {
        this.ggHostName = data().deepCopy(fields()[11].schema(), other.ggHostName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.latencyTsMap)) {
        this.latencyTsMap = data().deepCopy(fields()[12].schema(), other.latencyTsMap);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.numColumns)) {
        this.numColumns = data().deepCopy(fields()[13].schema(), other.numColumns);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.updColumns)) {
        this.updColumns = data().deepCopy(fields()[14].schema(), other.updColumns);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.nullColumns)) {
        this.nullColumns = data().deepCopy(fields()[15].schema(), other.nullColumns);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.missingColumns)) {
        this.missingColumns = data().deepCopy(fields()[16].schema(), other.missingColumns);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.beforeNullColumns)) {
        this.beforeNullColumns = data().deepCopy(fields()[17].schema(), other.beforeNullColumns);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.updCompressed)) {
        this.updCompressed = data().deepCopy(fields()[18].schema(), other.updCompressed);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.schemaType)) {
        this.schemaType = data().deepCopy(fields()[19].schema(), other.schemaType);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.SchemaName)) {
        this.SchemaName = data().deepCopy(fields()[20].schema(), other.SchemaName);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.timestamps)) {
        this.timestamps = data().deepCopy(fields()[21].schema(), other.timestamps);
        fieldSetFlags()[21] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing RheosDbHeader instance
     * @param other The existing instance to copy.
     */
    private Builder(io.indicator.kafka.RheosDbHeader other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.schema)) {
        this.schema = data().deepCopy(fields()[0].schema(), other.schema);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.table)) {
        this.table = data().deepCopy(fields()[1].schema(), other.table);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.opType)) {
        this.opType = data().deepCopy(fields()[2].schema(), other.opType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.opTs)) {
        this.opTs = data().deepCopy(fields()[3].schema(), other.opTs);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.recordRowid)) {
        this.recordRowid = data().deepCopy(fields()[4].schema(), other.recordRowid);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.tranScn)) {
        this.tranScn = data().deepCopy(fields()[5].schema(), other.tranScn);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.trailSeqno)) {
        this.trailSeqno = data().deepCopy(fields()[6].schema(), other.trailSeqno);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.trailRba)) {
        this.trailRba = data().deepCopy(fields()[7].schema(), other.trailRba);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.logPosition)) {
        this.logPosition = data().deepCopy(fields()[8].schema(), other.logPosition);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.logRba)) {
        this.logRba = data().deepCopy(fields()[9].schema(), other.logRba);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.dbName)) {
        this.dbName = data().deepCopy(fields()[10].schema(), other.dbName);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.ggHostName)) {
        this.ggHostName = data().deepCopy(fields()[11].schema(), other.ggHostName);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.latencyTsMap)) {
        this.latencyTsMap = data().deepCopy(fields()[12].schema(), other.latencyTsMap);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.numColumns)) {
        this.numColumns = data().deepCopy(fields()[13].schema(), other.numColumns);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.updColumns)) {
        this.updColumns = data().deepCopy(fields()[14].schema(), other.updColumns);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.nullColumns)) {
        this.nullColumns = data().deepCopy(fields()[15].schema(), other.nullColumns);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.missingColumns)) {
        this.missingColumns = data().deepCopy(fields()[16].schema(), other.missingColumns);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.beforeNullColumns)) {
        this.beforeNullColumns = data().deepCopy(fields()[17].schema(), other.beforeNullColumns);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.updCompressed)) {
        this.updCompressed = data().deepCopy(fields()[18].schema(), other.updCompressed);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.schemaType)) {
        this.schemaType = data().deepCopy(fields()[19].schema(), other.schemaType);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.SchemaName)) {
        this.SchemaName = data().deepCopy(fields()[20].schema(), other.SchemaName);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.timestamps)) {
        this.timestamps = data().deepCopy(fields()[21].schema(), other.timestamps);
        fieldSetFlags()[21] = true;
      }
    }

    /**
      * Gets the value of the 'schema' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchema$() {
      return schema;
    }

    /**
      * Sets the value of the 'schema' field.
      * @param value The value of 'schema'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setSchema$(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.schema = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'schema' field has been set.
      * @return True if the 'schema' field has been set, false otherwise.
      */
    public boolean hasSchema$() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'schema' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearSchema$() {
      schema = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'table' field.
      * @return The value.
      */
    public java.lang.CharSequence getTable() {
      return table;
    }

    /**
      * Sets the value of the 'table' field.
      * @param value The value of 'table'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setTable(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.table = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'table' field has been set.
      * @return True if the 'table' field has been set, false otherwise.
      */
    public boolean hasTable() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'table' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearTable() {
      table = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'opType' field.
      * @return The value.
      */
    public java.lang.CharSequence getOpType() {
      return opType;
    }

    /**
      * Sets the value of the 'opType' field.
      * @param value The value of 'opType'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setOpType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.opType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'opType' field has been set.
      * @return True if the 'opType' field has been set, false otherwise.
      */
    public boolean hasOpType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'opType' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearOpType() {
      opType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'opTs' field.
      * @return The value.
      */
    public java.lang.CharSequence getOpTs() {
      return opTs;
    }

    /**
      * Sets the value of the 'opTs' field.
      * @param value The value of 'opTs'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setOpTs(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.opTs = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'opTs' field has been set.
      * @return True if the 'opTs' field has been set, false otherwise.
      */
    public boolean hasOpTs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'opTs' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearOpTs() {
      opTs = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'recordRowid' field.
      * @return The value.
      */
    public java.lang.CharSequence getRecordRowid() {
      return recordRowid;
    }

    /**
      * Sets the value of the 'recordRowid' field.
      * @param value The value of 'recordRowid'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setRecordRowid(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.recordRowid = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'recordRowid' field has been set.
      * @return True if the 'recordRowid' field has been set, false otherwise.
      */
    public boolean hasRecordRowid() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'recordRowid' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearRecordRowid() {
      recordRowid = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'tranScn' field.
      * @return The value.
      */
    public java.lang.CharSequence getTranScn() {
      return tranScn;
    }

    /**
      * Sets the value of the 'tranScn' field.
      * @param value The value of 'tranScn'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setTranScn(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.tranScn = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'tranScn' field has been set.
      * @return True if the 'tranScn' field has been set, false otherwise.
      */
    public boolean hasTranScn() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'tranScn' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearTranScn() {
      tranScn = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'trailSeqno' field.
      * @return The value.
      */
    public java.lang.Long getTrailSeqno() {
      return trailSeqno;
    }

    /**
      * Sets the value of the 'trailSeqno' field.
      * @param value The value of 'trailSeqno'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setTrailSeqno(long value) {
      validate(fields()[6], value);
      this.trailSeqno = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'trailSeqno' field has been set.
      * @return True if the 'trailSeqno' field has been set, false otherwise.
      */
    public boolean hasTrailSeqno() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'trailSeqno' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearTrailSeqno() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'trailRba' field.
      * @return The value.
      */
    public java.lang.Long getTrailRba() {
      return trailRba;
    }

    /**
      * Sets the value of the 'trailRba' field.
      * @param value The value of 'trailRba'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setTrailRba(long value) {
      validate(fields()[7], value);
      this.trailRba = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'trailRba' field has been set.
      * @return True if the 'trailRba' field has been set, false otherwise.
      */
    public boolean hasTrailRba() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'trailRba' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearTrailRba() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'logPosition' field.
      * @return The value.
      */
    public java.lang.Long getLogPosition() {
      return logPosition;
    }

    /**
      * Sets the value of the 'logPosition' field.
      * @param value The value of 'logPosition'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setLogPosition(long value) {
      validate(fields()[8], value);
      this.logPosition = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'logPosition' field has been set.
      * @return True if the 'logPosition' field has been set, false otherwise.
      */
    public boolean hasLogPosition() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'logPosition' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearLogPosition() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'logRba' field.
      * @return The value.
      */
    public java.lang.Long getLogRba() {
      return logRba;
    }

    /**
      * Sets the value of the 'logRba' field.
      * @param value The value of 'logRba'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setLogRba(long value) {
      validate(fields()[9], value);
      this.logRba = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'logRba' field has been set.
      * @return True if the 'logRba' field has been set, false otherwise.
      */
    public boolean hasLogRba() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'logRba' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearLogRba() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'dbName' field.
      * @return The value.
      */
    public java.lang.CharSequence getDbName() {
      return dbName;
    }

    /**
      * Sets the value of the 'dbName' field.
      * @param value The value of 'dbName'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setDbName(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.dbName = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'dbName' field has been set.
      * @return True if the 'dbName' field has been set, false otherwise.
      */
    public boolean hasDbName() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'dbName' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearDbName() {
      dbName = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'ggHostName' field.
      * @return The value.
      */
    public java.lang.CharSequence getGgHostName() {
      return ggHostName;
    }

    /**
      * Sets the value of the 'ggHostName' field.
      * @param value The value of 'ggHostName'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setGgHostName(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.ggHostName = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'ggHostName' field has been set.
      * @return True if the 'ggHostName' field has been set, false otherwise.
      */
    public boolean hasGgHostName() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'ggHostName' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearGgHostName() {
      ggHostName = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'latencyTsMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Long> getLatencyTsMap() {
      return latencyTsMap;
    }

    /**
      * Sets the value of the 'latencyTsMap' field.
      * @param value The value of 'latencyTsMap'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setLatencyTsMap(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
      validate(fields()[12], value);
      this.latencyTsMap = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'latencyTsMap' field has been set.
      * @return True if the 'latencyTsMap' field has been set, false otherwise.
      */
    public boolean hasLatencyTsMap() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'latencyTsMap' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearLatencyTsMap() {
      latencyTsMap = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'numColumns' field.
      * @return The value.
      */
    public java.lang.Integer getNumColumns() {
      return numColumns;
    }

    /**
      * Sets the value of the 'numColumns' field.
      * @param value The value of 'numColumns'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setNumColumns(int value) {
      validate(fields()[13], value);
      this.numColumns = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'numColumns' field has been set.
      * @return True if the 'numColumns' field has been set, false otherwise.
      */
    public boolean hasNumColumns() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'numColumns' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearNumColumns() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'updColumns' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getUpdColumns() {
      return updColumns;
    }

    /**
      * Sets the value of the 'updColumns' field.
      * @param value The value of 'updColumns'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setUpdColumns(java.nio.ByteBuffer value) {
      validate(fields()[14], value);
      this.updColumns = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'updColumns' field has been set.
      * @return True if the 'updColumns' field has been set, false otherwise.
      */
    public boolean hasUpdColumns() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'updColumns' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearUpdColumns() {
      updColumns = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'nullColumns' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getNullColumns() {
      return nullColumns;
    }

    /**
      * Sets the value of the 'nullColumns' field.
      * @param value The value of 'nullColumns'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setNullColumns(java.nio.ByteBuffer value) {
      validate(fields()[15], value);
      this.nullColumns = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'nullColumns' field has been set.
      * @return True if the 'nullColumns' field has been set, false otherwise.
      */
    public boolean hasNullColumns() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'nullColumns' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearNullColumns() {
      nullColumns = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'missingColumns' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getMissingColumns() {
      return missingColumns;
    }

    /**
      * Sets the value of the 'missingColumns' field.
      * @param value The value of 'missingColumns'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setMissingColumns(java.nio.ByteBuffer value) {
      validate(fields()[16], value);
      this.missingColumns = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'missingColumns' field has been set.
      * @return True if the 'missingColumns' field has been set, false otherwise.
      */
    public boolean hasMissingColumns() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'missingColumns' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearMissingColumns() {
      missingColumns = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'beforeNullColumns' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getBeforeNullColumns() {
      return beforeNullColumns;
    }

    /**
      * Sets the value of the 'beforeNullColumns' field.
      * @param value The value of 'beforeNullColumns'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setBeforeNullColumns(java.nio.ByteBuffer value) {
      validate(fields()[17], value);
      this.beforeNullColumns = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'beforeNullColumns' field has been set.
      * @return True if the 'beforeNullColumns' field has been set, false otherwise.
      */
    public boolean hasBeforeNullColumns() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'beforeNullColumns' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearBeforeNullColumns() {
      beforeNullColumns = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'updCompressed' field.
      * @return The value.
      */
    public java.lang.Boolean getUpdCompressed() {
      return updCompressed;
    }

    /**
      * Sets the value of the 'updCompressed' field.
      * @param value The value of 'updCompressed'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setUpdCompressed(boolean value) {
      validate(fields()[18], value);
      this.updCompressed = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'updCompressed' field has been set.
      * @return True if the 'updCompressed' field has been set, false otherwise.
      */
    public boolean hasUpdCompressed() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'updCompressed' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearUpdCompressed() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'schemaType' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchemaType() {
      return schemaType;
    }

    /**
      * Sets the value of the 'schemaType' field.
      * @param value The value of 'schemaType'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setSchemaType(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.schemaType = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'schemaType' field has been set.
      * @return True if the 'schemaType' field has been set, false otherwise.
      */
    public boolean hasSchemaType() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'schemaType' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearSchemaType() {
      schemaType = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'SchemaName' field.
      * @return The value.
      */
    public java.lang.CharSequence getSchemaName() {
      return SchemaName;
    }

    /**
      * Sets the value of the 'SchemaName' field.
      * @param value The value of 'SchemaName'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setSchemaName(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.SchemaName = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'SchemaName' field has been set.
      * @return True if the 'SchemaName' field has been set, false otherwise.
      */
    public boolean hasSchemaName() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'SchemaName' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearSchemaName() {
      SchemaName = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamps' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Long> getTimestamps() {
      return timestamps;
    }

    /**
      * Sets the value of the 'timestamps' field.
      * @param value The value of 'timestamps'.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder setTimestamps(java.util.Map<java.lang.CharSequence,java.lang.Long> value) {
      validate(fields()[21], value);
      this.timestamps = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamps' field has been set.
      * @return True if the 'timestamps' field has been set, false otherwise.
      */
    public boolean hasTimestamps() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'timestamps' field.
      * @return This builder.
      */
    public io.indicator.kafka.RheosDbHeader.Builder clearTimestamps() {
      timestamps = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public RheosDbHeader build() {
      try {
        RheosDbHeader record = new RheosDbHeader();
        record.schema = fieldSetFlags()[0] ? this.schema : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.table = fieldSetFlags()[1] ? this.table : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.opType = fieldSetFlags()[2] ? this.opType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.opTs = fieldSetFlags()[3] ? this.opTs : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.recordRowid = fieldSetFlags()[4] ? this.recordRowid : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.tranScn = fieldSetFlags()[5] ? this.tranScn : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.trailSeqno = fieldSetFlags()[6] ? this.trailSeqno : (java.lang.Long) defaultValue(fields()[6]);
        record.trailRba = fieldSetFlags()[7] ? this.trailRba : (java.lang.Long) defaultValue(fields()[7]);
        record.logPosition = fieldSetFlags()[8] ? this.logPosition : (java.lang.Long) defaultValue(fields()[8]);
        record.logRba = fieldSetFlags()[9] ? this.logRba : (java.lang.Long) defaultValue(fields()[9]);
        record.dbName = fieldSetFlags()[10] ? this.dbName : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.ggHostName = fieldSetFlags()[11] ? this.ggHostName : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.latencyTsMap = fieldSetFlags()[12] ? this.latencyTsMap : (java.util.Map<java.lang.CharSequence,java.lang.Long>) defaultValue(fields()[12]);
        record.numColumns = fieldSetFlags()[13] ? this.numColumns : (java.lang.Integer) defaultValue(fields()[13]);
        record.updColumns = fieldSetFlags()[14] ? this.updColumns : (java.nio.ByteBuffer) defaultValue(fields()[14]);
        record.nullColumns = fieldSetFlags()[15] ? this.nullColumns : (java.nio.ByteBuffer) defaultValue(fields()[15]);
        record.missingColumns = fieldSetFlags()[16] ? this.missingColumns : (java.nio.ByteBuffer) defaultValue(fields()[16]);
        record.beforeNullColumns = fieldSetFlags()[17] ? this.beforeNullColumns : (java.nio.ByteBuffer) defaultValue(fields()[17]);
        record.updCompressed = fieldSetFlags()[18] ? this.updCompressed : (java.lang.Boolean) defaultValue(fields()[18]);
        record.schemaType = fieldSetFlags()[19] ? this.schemaType : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.SchemaName = fieldSetFlags()[20] ? this.SchemaName : (java.lang.CharSequence) defaultValue(fields()[20]);
        record.timestamps = fieldSetFlags()[21] ? this.timestamps : (java.util.Map<java.lang.CharSequence,java.lang.Long>) defaultValue(fields()[21]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<RheosDbHeader>
    WRITER$ = (org.apache.avro.io.DatumWriter<RheosDbHeader>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<RheosDbHeader>
    READER$ = (org.apache.avro.io.DatumReader<RheosDbHeader>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
